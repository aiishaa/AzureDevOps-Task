# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - 'main'

pr:
  branches:
    include:
      - 'main'

pool:
  name: "aws-agents-pool"

jobs:
  - job: AWS_Setup
    displayName: 'Setup AWS Environment'
    steps:
      - checkout: self
      - task: AWSShellScript@1
        inputs:
          awsCredentials: 'AWS Service Connection'
          regionName: 'us-east-1'
          scriptType: 'inline'
          inlineScript: |
            sudo apt install unzip
            sudo apt install jq

  - job: Terraform_Initialization
    displayName: 'Initialize Terraform'
    steps:
      - checkout: self
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'aws'
          command: 'init'
          backendServiceAWS: 'aws_for_terraform'
          backendAWSBucketName: 's3-terraform-backend-bucket-123456'
          backendAWSKey: 'terraform.tfstate'

  - job: Fetch_Terraform_Variables
    displayName: 'Fetch Terraform Variables from AWS Secrets Manager'
    steps:
      - checkout: self
      - script: |
          # Fetch Terraform variables from AWS Secrets Manager
          secret_value=$(aws secretsmanager get-secret-value --secret-id development-secrets --query SecretString --output text)

          # Convert JSON secret to terraform.tfvars format
          echo "$secret_value" | jq -r 'to_entries | .[] | "\(.key) = \(.value | tojson)"' > terraform.tfvars
          cat terraform.tfvars

stages:
  - stage: Plan
    displayName: 'Plan Terraform'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: AWS_Setup
      - job: Terraform_Initialization
      - job: Fetch_Terraform_Variables
      - job: Terraform_Plan
        displayName: 'Terraform Plan'
        steps:
          - checkout: self
          - task: TerraformTaskV4@4
            inputs:
              provider: 'aws'
              command: 'plan'
              commandOptions: '-var-file=terraform.tfvars'
              environmentServiceNameAWS: 'aws_for_terraform'

  - stage: Apply
    displayName: 'Apply Terraform'
    condition: or(
        and(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/main')),
        and(ne(variables['Build.Reason'], 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      )
    jobs:
      - job: AWS_Setup
      - job: Terraform_Initialization
      - job: Fetch_Terraform_Variables
      - job: Terraform_Apply
        displayName: 'Terraform Apply'
        steps:
          - checkout: self
          # - task: TerraformTaskV4@4
          #   inputs:
          #     provider: 'aws'
          #     command: 'apply'
          #     commandOptions: '-var-file=terraform.tfvars --auto-approve'
          #     environmentServiceNameAWS: 'aws_for_terraform'
